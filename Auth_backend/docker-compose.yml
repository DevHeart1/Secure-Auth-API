version: '3.8'

services:
  web:
    build: .
    restart: always
    volumes:
      - static_volume:/app/Auth_backend/staticfiles
      - media_volume:/app/Auth_backend/media
      - logs_volume:/app/Auth_backend/logs
    env_file:
      - ./.env
    environment:
      - USE_POSTGRES=True
      - DJANGO_SETTINGS_MODULE=secure_auth.settings_prod
    depends_on:
      - postgres
      - redis
    networks:
      - secure_auth_network

  celery_worker:
    build: .
    restart: always
    command: celery -A secure_auth worker --loglevel=info
    volumes:
      - logs_volume:/app/Auth_backend/logs
    env_file:
      - ./.env
    environment:
      - USE_POSTGRES=True
      - DJANGO_SETTINGS_MODULE=secure_auth.settings_prod
      - CELERY_WORKER=True
    depends_on:
      - web
      - redis
      - postgres
    networks:
      - secure_auth_network

  celery_beat:
    build: .
    restart: always
    command: celery -A secure_auth beat --loglevel=info
    volumes:
      - logs_volume:/app/Auth_backend/logs
    env_file:
      - ./.env
    environment:
      - USE_POSTGRES=True
      - DJANGO_SETTINGS_MODULE=secure_auth.settings_prod
      - CELERY_BEAT=True
    depends_on:
      - web
      - redis
      - postgres
    networks:
      - secure_auth_network

  postgres:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=${DB_NAME:-secure_auth_db}
      - POSTGRES_USER=${DB_USER:-secure_auth_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure-database-password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-secure_auth_user} -d ${DB_NAME:-secure_auth_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secure_auth_network

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secure_auth_network

  nginx:
    image: nginx:1.25-alpine
    restart: always
    volumes:
      - ./nginx/secure_auth.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/static
      - media_volume:/app/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - secure_auth_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    restart: always
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - secure_auth_network

  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - secure_auth_network

  grafana:
    image: grafana/grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - secure_auth_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:
  prometheus_data:
  grafana_data:

networks:
  secure_auth_network:
    driver: bridge